name: Go Builder

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
        default: "v0.1.0"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.3

      - name: Compile Server
        run: |
          mkdir -p build/${{ matrix.os }}-${{ matrix.arch }}
          echo "Compiling server for ${{ matrix.os }}-${{ matrix.arch }}..."
          if [ "${{ matrix.os }}" == "windows" ]; then
            cp cmd/server/rsrc_windows_amd64.syso .
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/server.exe cmd/server/main.go
          else
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/server cmd/server/main.go
          fi
          if [ $? -ne 0 ]; then
            echo "Error: Failed to build server for ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          fi

      - name: Compile Client
        run: |
          mkdir -p build/${{ matrix.os }}-${{ matrix.arch }}
          echo "Compiling client for ${{ matrix.os }}-${{ matrix.arch }}..."
          if [ "${{ matrix.os }}" == "windows" ]; then
            cp cmd/client/rsrc_windows_amd64.syso .
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/client.exe cmd/client/main.go
          else
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/client cmd/client/main.go
          fi
          if [ $? -ne 0 ]; then
            echo "Error: Failed to build client for ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          fi

      - name: Compress Artifacts
        run: |
          echo "Compressing artifacts for ${{ matrix.os }}-${{ matrix.arch }}..."
          tar -czf build/${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C build/${{ matrix.os }}-${{ matrix.arch }} .
          if [ $? -ne 0 ]; then
            echo "Error: Failed to compress artifacts for ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          fi

      - name: Debug Build Output
        run: |
          echo "Checking build output:"
          ls -R build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: chidweb-${{ matrix.os }}-${{ matrix.arch }}
          path: build/${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Version
        id: version
        run: |
          echo "release_version=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name": "'"${{ env.release_version }}"'", "name": "Release '"${{ env.release_version }}"'", "draft": false, "prerelease": false}')
          upload_url=$(echo $response | jq -r '.upload_url' | sed 's/{.*}//')
          echo "upload_url=$upload_url" >> $GITHUB_ENV

      - name: Upload Artifacts
        run: |
          echo "Uploading artifacts..."
          for artifact in $(ls build/*.tar.gz); do
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              -F "file=@$artifact" \
              "${{ env.upload_url }}?name=$(basename $artifact)"
          done
