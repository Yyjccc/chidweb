name: Multi-platform Builder

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: "v1.0.0"
        required: true
        default: "v0.1.0"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.3

      - name: Compile Server
        run: |
          mkdir -p build/${{ matrix.os }}-${{ matrix.arch }}
          echo "Compiling server for ${{ matrix.os }}-${{ matrix.arch }}..."
          if [ "${{ matrix.os }}" == "windows" ]; then
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/server.exe cmd/server/main.go
          else
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/server cmd/server/main.go
          fi
          if [ $? -ne 0 ]; then
            echo "Error: Failed to build server for ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          fi

      - name: Compile Client
        run: |
          mkdir -p build/${{ matrix.os }}-${{ matrix.arch }}
          echo "Compiling client for ${{ matrix.os }}-${{ matrix.arch }}..."
          if [ "${{ matrix.os }}" == "windows" ]; then
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/client.exe cmd/client/main.go
          else
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o build/${{ matrix.os }}-${{ matrix.arch }}/client cmd/client/main.go
          fi
          if [ $? -ne 0 ]; then
            echo "Error: Failed to build client for ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          fi

      - name: Compress Artifacts
        run: |
          echo "Compressing artifacts for ${{ matrix.os }}-${{ matrix.arch }}..."
          tar -czf build/${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C build/${{ matrix.os }}-${{ matrix.arch }} .
          if [ $? -ne 0 ]; then
            echo "Error: Failed to compress artifacts for ${{ matrix.os }}-${{ matrix.arch }}"
            exit 1
          fi

      - name: Debug Build Output
        run: |
          echo "Checking build output:"
          ls -R build

      # Keep compiled files as artifacts for later jobs
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: build/${{ matrix.os }}-${{ matrix.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Version
        id: version
        run: |
          echo "release_version=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Check if Release Exists
        id: check_release
        run: |
          response=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.release_version }})
          if [[ "$response" -eq 200 ]]; then
            echo "release_exists=true" >> $GITHUB_ENV
            upload_url=$(jq -r '.upload_url' response.json | sed 's/{.*}//')
            echo "upload_url=$upload_url" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV
          fi

      - name: Create or Update Release
        id: create_release
        run: |
          if [[ "${{ env.release_exists }}" == "true" ]]; then
            echo "Release exists. Updating..."
            release_id=$(jq -r '.id' response.json)
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases/${release_id} \
              -d '{"name": "Release '"${{ env.release_version }}"'", "draft": false, "prerelease": false}'
          else
            echo "Release does not exist. Creating a new one..."
            response=$(curl -s -w "%{http_code}" -o new_release.json \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d '{"tag_name": "'"${{ env.release_version }}"'", "name": "Release '"${{ env.release_version }}"'", "draft": false, "prerelease": false}')
            echo "upload_url=$(jq -r '.upload_url' new_release.json | sed 's/{.*}//')" >> $GITHUB_ENV
          fi

      - name: Upload Linux AMD64 Assets
        if: ${{ env.upload_url && env.release_exists == 'true' }}
        run: |
          echo "Downloading build artifact for linux-amd64..."
          curl -sL "https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/build-artifacts-linux-amd64.tar.gz" -o build/linux-amd64.tar.gz
          if [[ ! -f build/linux-amd64.tar.gz ]]; then
            echo "Error: build/linux-amd64.tar.gz does not exist"
            exit 1
          fi
          echo "Uploading Linux AMD64 Assets..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -F "file=@build/linux-amd64.tar.gz" \
            "${{ env.upload_url }}?name=server-linux-amd64.tar.gz"

      - name: Upload Linux ARM64 Assets
        if: ${{ env.upload_url && env.release_exists == 'true' }}
        run: |
          echo "Downloading build artifact for linux-arm64..."
          curl -sL "https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/build-artifacts-linux-arm64.tar.gz" -o build/linux-arm64.tar.gz
          if [[ ! -f build/linux-arm64.tar.gz ]]; then
            echo "Error: build/linux-arm64.tar.gz does not exist"
            exit 1
          fi
          echo "Uploading Linux ARM64 Assets..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -F "file=@build/linux-arm64.tar.gz" \
            "${{ env.upload_url }}?name=server-linux-arm64.tar.gz"

      - name: Upload Windows AMD64 Assets
        if: ${{ env.upload_url && env.release_exists == 'true' }}
        run: |
          echo "Downloading build artifact for windows-amd64..."
          curl -sL "https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/build-artifacts-windows-amd64.tar.gz" -o build/windows-amd64.tar.gz
          if [[ ! -f build/windows-amd64.tar.gz ]]; then
            echo "Error: build/windows-amd64.tar.gz does not exist"
            exit 1
          fi
          echo "Uploading Windows AMD64 Assets..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -F "file=@build/windows-amd64.tar.gz" \
            "${{ env.upload_url }}?name=server-windows-amd64.tar.gz"

      - name: Upload Windows ARM64 Assets
        if: ${{ env.upload_url && env.release_exists == 'true' }}
        run: |
          echo "Downloading build artifact for windows-arm64..."
          curl -sL "https://github.com/${{ github.repository }}/actions/artifacts/${{ github.run_id }}/build-artifacts-windows-arm64.tar.gz" -o build/windows-arm64.tar.gz
          if [[ ! -f build/windows-arm64.tar.gz ]]; then
            echo "Error: build/windows-arm64.tar.gz does not exist"
            exit 1
          fi
          echo "Uploading Windows ARM64 Assets..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -F "file=@build/windows-arm64.tar.gz" \
            "${{ env.upload_url }}?name=server-windows-arm64.tar.gz"
